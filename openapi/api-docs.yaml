openapi: 3.0.1
info:
  title: OpenAPI definition
  version: v0
servers:
- url: http://localhost:8081/
  description: Generated server url
paths:
  /api/wagons/{wagonId}:
    get:
      tags:
      - wagon-controller
      summary: Get an existing wagon
      operationId: getSingleWagon
      parameters:
      - name: wagonId
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Wagon"

        "404":
          description: No wagon to get
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Wagon'
    put:
      tags:
      - wagon-controller
      summary: Update an existing wagon
      operationId: updateSingleWagon
      parameters:
      - name: wagonId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Wagon'
        required: true
      responses:
        "404":
          description: No wagon to update
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Wagon'
        "200":
          description: Wagon successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Wagon'
    delete:
      tags:
      - wagon-controller
      summary: Delete an existing wagon
      operationId: deleteWagon
      parameters:
      - name: wagonId
        in: path
        required: true
        schema:
          type: string
      responses:
        "404":
          description: No wagon to delete
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Wagon'
        "204":
          description: No content
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Wagon'
  /api/trains/{trainId}:
    get:
      tags:
      - train-controller
      summary: Get an existing train
      operationId: getSingleTrain
      parameters:
      - name: trainId
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Train'
        "404":
          description: No train to get
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Train'
    put:
      tags:
      - train-controller
      summary: Update an existing train
      operationId: updateSingleTrain
      parameters:
      - name: trainId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Train'
        required: true
      responses:
        "404":
          description: No train to update
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Train'
        "200":
          description: Train successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Train'
    delete:
      tags:
      - train-controller
      summary: Delete an existing train
      operationId: deleteTrain
      parameters:
      - name: trainId
        in: path
        required: true
        schema:
          type: string
      responses:
        "404":
          description: No train to delete
        "204":
          description: No content
  /api/routes/{routeId}:
    get:
      tags:
      - route-controller
      summary: Get an existing route
      operationId: getSingleRoute
      parameters:
      - name: routeId
        in: path
        required: true
        schema:
          type: string
      responses:
        "404":
          description: No route to get
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Route'
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Route'
    put:
      tags:
      - route-controller
      summary: Update an existing route
      operationId: updateSingleTrain_1
      parameters:
      - name: routeId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Route'
        required: true
      responses:
        "200":
          description: Route successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Route'
        "404":
          description: No route to update
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Route'
    delete:
      tags:
      - route-controller
      summary: Delete an existing route
      operationId: deleteRoute
      parameters:
      - name: routeId
        in: path
        required: true
        schema:
          type: string
      responses:
        "404":
          description: No route to delete
        "204":
          description: No content
  /api/wagons:
    get:
      tags:
      - wagon-controller
      summary: Get wagons list with optional filters
      operationId: findWagonPage
      parameters:
      - name: bathroom
        in: query
        required: false
        schema:
          type: boolean
      - name: wagonClass
        in: query
        required: false
        schema:
          type: string
          enum:
          - PRIMA
          - SECONDA
          - ECONOMY
      - name: minimumTables
        in: query
        required: false
        schema:
          type: integer
          format: int32
      - name: kitchenType
        in: query
        required: false
        schema:
          type: string
      - name: fuelType
        in: query
        required: false
        schema:
          type: string
          enum:
          - ELECTRIC
          - DIESEL
      - name: minimumBeds
        in: query
        required: false
        schema:
          type: integer
          format: int32
      - name: bedType
        in: query
        required: false
        schema:
          type: string
      - name: minimumSeats
        in: query
        required: false
        schema:
          type: integer
          format: int32
      - name: offset
        in: query
        required: true
        schema:
          type: integer
          format: int32
      - name: limit
        in: query
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedResponseWagon'
        "400":
          description: Bad request
    post:
      tags:
      - wagon-controller
      summary: Add a new wagon
      operationId: createTrain
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Wagon'
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Wagon"
        "409":
          description: Already exists a train with id in body
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Wagon'
        "400":
          description: Parameters not available for type of wagon in body
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Wagon'
  /api/trains:
    get:
      tags:
      - train-controller
      summary: Get trains list with optional filters
      operationId: findTrainPage
      parameters:
      - name: companyName
        in: query
        required: false
        schema:
          type: string
      - name: trainType
        in: query
        required: false
        schema:
          type: string
          enum:
          - REGIONALE
          - INTERCITY
          - FRECCIAROSSA
      - name: offset
        in: query
        required: true
        schema:
          type: integer
          format: int32
      - name: limit
        in: query
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedResponse'
        "400":
          description: Bad request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PagedResponseTrain'
    post:
      tags:
      - train-controller
      summary: Add a new train
      operationId: createTrain
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Train'
        required: true
      responses:
        "409":
          description: Already exists a train with id in body
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Train'
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Train'
  /api/trains/{trainId}/routes/{routeId}:
    post:
      tags:
      - train-controller
      summary: Add a new association between route and train
      operationId: createTrainRouteAssociation
      parameters:
      - name: trainId
        in: path
        required: true
        schema:
          type: string
      - name: routeId
        in: path
        required: true
        schema:
          type: string
      responses:
        "409":
          description: Already exists an association between ids in path
        "201":
          description: Created
    delete:
      tags:
      - train-controller
      summary: Delete an existing association between train and route
      operationId: deleteTrainRouteAssociation
      parameters:
      - name: trainId
        in: path
        required: true
        schema:
          type: string
      - name: routeId
        in: path
        required: true
        schema:
          type: string
      responses:
        "404":
          description: No association to delete
        "204":
          description: No content
  /api/routes:
    get:
      tags:
      - route-controller
      summary: Get routes list with optional filters
      operationId: findTrainPage_1
      parameters:
      - name: destinationStationName
        in: query
        required: false
        schema:
          type: string
      - name: startStationName
        in: query
        required: false
        schema:
          type: string
      - name: binaryType
        in: query
        required: false
        schema:
          type: string
      - name: minimumLength
        in: query
        required: false
        schema:
          type: number
          format: double
      - name: maxLength
        in: query
        required: false
        schema:
          type: number
          format: double
      - name: offset
        in: query
        required: true
        schema:
          type: integer
          format: int32
      - name: limit
        in: query
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedResponse'
        "400":
          description: Bad request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PagedResponseRoute'
    post:
      tags:
      - route-controller
      summary: Add a new route
      operationId: createRoute
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Route'
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Route'
        "409":
          description: Already exists a route with id in body
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Route'
  /api/trains/{trainId}/wagons:
    get:
      tags:
      - train-controller
      summary: Get wagons list of a specific train with optional filters
      operationId: findWagonsOfTrainPage
      parameters:
      - name: trainId
        in: path
        required: true
        schema:
          type: string
      - name: wagonType
        in: query
        required: false
        schema:
          type: string
          enum:
          - MOTOR
          - PASSENGER
          - BED
          - RESTAURANT
      - name: kitchenType
        in: query
        required: false
        schema:
          type: string
      - name: fuelType
        in: query
        required: false
        schema:
          type: string
      - name: bathroom
        in: query
        required: false
        schema:
          type: boolean
      - name: wagonClass
        in: query
        required: false
        schema:
          type: string
          enum:
          - PRIMA
          - SECONDA
          - ECONOMY
      - name: bedType
        in: query
        required: false
        schema:
          type: string
      - name: offset
        in: query
        required: true
        schema:
          type: integer
          format: int32
      - name: limit
        in: query
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedResponse'
        "404":
          description: No train to get
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PagedResponseWagon'
  /api/trains/{trainId}/routes:
    get:
      tags:
      - train-controller
      summary: Get routes list of a specific train with optional filters
      operationId: findWagonsOfTrainPage_1
      parameters:
      - name: trainId
        in: path
        required: true
        schema:
          type: string
      - name: stationName
        in: query
        required: false
        schema:
          type: string
      - name: binaryType
        in: query
        required: false
        schema:
          type: string
      - name: minimumLength
        in: query
        required: false
        schema:
          type: number
          format: double
      - name: maxLength
        in: query
        required: false
        schema:
          type: number
          format: double
      - name: offset
        in: query
        required: true
        schema:
          type: integer
          format: int32
      - name: limit
        in: query
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedResponse'
        "404":
          description: No train to get
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PagedResponseRoute'
components:
  schemas:
    Wagon:
      type: object
      properties:
        id:
          type: string
        trainId:
          type: string
        wagonClass:
          type: string
          enum:
          - PRIMA
          - SECONDA
          - ECONOMY
        wagonType:
          type: string
          enum:
          - MOTOR
          - PASSENGER
          - BED
          - RESTAURANT
        length:
          type: number
          format: double
        width:
          type: number
          format: double
        height:
          type: number
          format: double
        bathroom:
          type: boolean
        typeInfo:
          type: object
          oneOf:
            - $ref: "#/components/schemas/MotorWagon"
            - $ref: "#/components/schemas/PassengerWagon"
            - $ref: "#/components/schemas/BedWagon"
            - $ref: "#/components/schemas/RestaurantWagon"
      discriminator:
        propertyName: wagonType
    Train:
      type: object
      properties:
        id:
          type: string
        trainType:
          type: string
          enum:
          - REGIONALE
          - INTERCITY
          - FRECCIAROSSA
        companyName:
          type: string
    Route:
      type: object
      properties:
        id:
          type: string
        binaryType:
          type: string
        startStationName:
          type: string
        destinationStationName:
          type: string
        length:
          type: number
          format: double
    RestaurantWagon:
      type: object
      properties:
        kitchenType:
          type: string
        ntables:
          type: integer
          format: int32
    PassengerWagon:
      type: object
      properties:
        nseats:
          type: integer
          format: int32
    BedWagon:
      type: object
      properties:
        bedType:
          type: string
        nbeds:
          type: integer
          format: int32
    MotorWagon:
      type: object
      properties:
        fuelType:
          type: string
          enum:
          - ELECTRIC
          - DIESEL
    PagedResponseWagon:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Wagon'
        index:
          type: string
        elements:
          type: string
        totalElements:
          type: integer
          format: int64
    PagedResponseTrain:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Train'
        index:
          type: string
        elements:
          type: string
        totalElements:
          type: integer
          format: int64
    PagedResponseRoute:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Route'
        index:
          type: string
        elements:
          type: string
        totalElements:
          type: integer
          format: int64
